import cv2
import numpy as np
from ultralytics import YOLO
import RPi.GPIO as GPIO

in1 = 4
in2 = 17
in3 = 27
in4 = 22
en1 = 23
en2 = 24
GPIO.setmode(GPIO.BCM)
GPIO.setup(en1, GPIO.OUT)
GPIO.setup(en2, GPIO.OUT)
GPIO.setup(in1, GPIO.OUT)
GPIO.setup(in2, GPIO.OUT)
GPIO.setup(in3, GPIO.OUT)
GPIO.setup(in4, GPIO.OUT)
p1 = GPIO.PWM(en1, 100)
p2 = GPIO.PWM(en2, 100)
p1.start(50)
p2.start(50)
GPIO.output(in1, GPIO.LOW)
GPIO.output(in2, GPIO.LOW)
GPIO.output(in3, GPIO.LOW)
GPIO.output(in4, GPIO.LOW)


# Define movement functions (replace these with your actual movement commands)
def move_forward():
    print("Moving forward")
    GPIO.output(in1, GPIO.HIGH)
    GPIO.output(in2, GPIO.LOW)
    GPIO.output(in3, GPIO.HIGH)
    GPIO.output(in4, GPIO.LOW)

def move_left():
    print("Moving left")
    GPIO.output(in1, GPIO.HIGH)
    GPIO.output(in2, GPIO.LOW)
    GPIO.output(in3, GPIO.LOW)
    GPIO.output(in4, GPIO.HIGH)

def move_right():
    print("Moving right")
    GPIO.output(in1, GPIO.LOW)
    GPIO.output(in2, GPIO.HIGH)
    GPIO.output(in3, GPIO.HIGH)
    GPIO.output(in4, GPIO.LOW)

# Initialize the YOLOv8 model
model = YOLO("//home/thejas/Downloads/best (6).pt")

# Open the video file
video = cv2.VideoCapture("//home/thejas/Downloads/video3.mp4")
video.set(3, 160)
video.set(4, 120)

# Get the video's width and height
width = int(video.get(cv2.CAP_PROP_FRAME_WIDTH))
height = int(video.get(cv2.CAP_PROP_FRAME_HEIGHT))

# Define the codec and create a VideoWriter object
fourcc = cv2.VideoWriter_fourcc(*'mp4v')
out = cv2.VideoWriter('output.mp4', fourcc, 20.0, (width, height))

def get_masks(frame):
    """Performs segmentation on the frame."""
    results = model(frame, stream=True)  # Perform segmentation

    # Get the segmentation masks
    masks = []
    for result in results:
        m = result.masks
        if m is not None:
            masks.append(m)

    return masks

def find_lowest_point(mask_array):
    """Finds the lowest non-zero point in the mask."""
    y, x = np.where(mask_array != 0)  # Get coordinates of non-zero pixels
    if len(y) > 0:  # Check if any non-zero pixels exist
        lowest_index = np.argmax(y)  # Index of the lowest pixel
        return (x[lowest_index], y[lowest_index])
    else:
        return None  # No non-zero pixels found

def create_intersection_and_lines(frame, mask_array, lane_center=(width // 2, height // 2)):
    """
    Finds the lowest point, creates intersection point with lane center,
    draws lines, calculates distances, and calls movement functions.
    """
    lowest_point = find_lowest_point(mask_array)

    if lowest_point is not None:
        # Calculate intersection point
        intersection_point = (lowest_point[0], lane_center[1])

        # Draw lines and calculate lengths
        cv2.line(frame, lowest_point, intersection_point, (0, 255, 0), 2)  # Green line (lowest to intersection)
        cv2.line(frame, intersection_point, lane_center, (255, 0, 0), 2)  # Blue line (intersection to center)

        # Calculate distances
        lowest_to_intersection_length = np.linalg.norm(np.array(lowest_point) - np.array(intersection_point))
        intersection_to_center_length = np.linalg.norm(np.array(intersection_point) - np.array(lane_center))

        # Display distances
        cv2.putText(frame, f"L1: {int(lowest_to_intersection_length)}px", (10, 20), cv2.FONT_HERSHEY_SIMPLEX,
                    0.7, (0, 255, 0), 2)  # Green text for L1 (lowest to intersection)
        cv2.putText(frame, f"L2: {int(intersection_to_center_length)}px", (10, 40), cv2.FONT_HERSHEY_SIMPLEX,
                    0.7, (255, 0, 0), 2)  # Red text for L2 (intersection to center)

        # Draw intersection point (green circle)
        cv2.circle(frame, intersection_point, 5, (0, 255, 0), -1)

        # Call movement functions based on distance range
        target_distance = 230  # Adjust this value for your desired target distance
        tolerance = 2.5  # Adjust this value for tolerance range
        if target_distance - tolerance <= intersection_to_center_length <= target_distance + tolerance:
            move_forward()
        elif intersection_to_center_length < target_distance - tolerance:
            move_left()
        else:
            move_right()  # Move right if too far away from the center

    return frame

while True:
    # Read a frame from the video
    ret, frame = video.read()

    # Break the loop if the video is finished
    if not ret:
        break

    # Perform segmentation on the frame
    masks = get_masks(frame)

    # Check if masks is not empty
    if masks:
        # Convert the masks to a numpy array
        mask_array = np.zeros((height, width), dtype=np.uint8)

        for mask in masks:
            # Get the polygon points of the mask
            polygon = mask.xy[0]
            # Convert the polygon points to integers
            polygon = polygon.astype(np.int32)

            # Fill the mask with white color
            cv2.fillPoly(mask_array, [polygon], (255,))

        # Create intersection point and display on frame
        frame = create_intersection_and_lines(frame.copy(), mask_array)

        # Write the frame with intersection point to the output video
        out.write(frame)

    else:
        print("No masks found")
        GPIO.output(in1, GPIO.LOW)
        GPIO.output(in2, GPIO.LOW)
        GPIO.output(in3, GPIO.LOW)
        GPIO.output(in4, GPIO.LOW)

    if cv2.waitKey(1) & 0xff == ord('q'):   # 1 is the time in ms
        GPIO.output(in1, GPIO.LOW)
        GPIO.output(in2, GPIO.LOW)
        GPIO.output(in3, GPIO.LOW)
        GPIO.output(in4, GPIO.LOW)
        break

# Relasing the Motors
GPIO.output(in1, GPIO.LOW)
GPIO.output(in2, GPIO.LOW)
GPIO.output(in3, GPIO.LOW)
GPIO.output(in4, GPIO.LOW)
# Release the VideoCapture and VideoWriter objects
video.release()
out.release()

# Close all windows
cv2.destroyAllWindows()